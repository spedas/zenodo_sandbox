name: Reserve DOI for Release

# Manually triggered when a new release is about to occur

on:
  workflow_dispatch:

jobs:
  reserve-doi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find Latest Zenodo Deposition
        id: find_latest
        run: |
          ZENODO_API_TOKEN=${{ secrets.ZENODO_API_TOKEN }}
          CONCEPT_DOI="10.5281/zenodo.14862141"
          CONCEPT_RECID="14862141"

          # Query the public records API (does not require authentication)
          # Try adding the access token to see if draft releases are returned
          RESPONSE=$(curl -s "https://zenodo.org/api/deposit/depositions?q=conceptdoi:$CONCEPT_DOI&size=1&sort=mostrecent&access_token=$ZENODO_API_TOKEN")
      
          echo "Zenodo response: $RESPONSE"  # Debugging step
          
          # Check to see if we got a draft, or a published release
          
          LATEST_RECID=$(echo "$RESPONSE" | jq -r '.[0].id')
      
          LATEST_PUBLIC_RECORD_ID=$(echo "$RESPONSE" | jq -r '.[0].id')
          LATEST_PUBLIC_RECORD_STATE=$(echo "$RESPONSE" | jq -r '.[0].state')
          LATEST_PUBLIC_RECORD_SUBMITTED=$(echo "$RESPONSE" | jq -r '.[0].submitted')
  
          echo "Latest record ID:" $LATEST_PUBLIC_RECORD_ID          
          echo "Latest record state:" $LATEST_PUBLIC_RECORD_STATE
          echo "Latest record submission status:" $LATEST_PUBLIC_RECORD_SUBMITTED
          
          if [ -z "$LATEST_PUBLIC_RECORD_ID" ] || [ "$LATEST_PUBLIC_RECORD_ID" == "null" ]; then
            echo "Error: Could not find latest record in private API."
            exit 1
          else
            echo "Found latest public record ID: $LATEST_PUBLIC_RECORD_ID"
            echo "LATEST_PUBLIC_RECORD_ID=$LATEST_PUBLIC_RECORD_ID" >> $GITHUB_ENV
          fi

          if [ -z "$LATEST_PUBLIC_RECORD_SUBMITTED" ] || [ "$LATEST_PUBLIC_RECORD_SUBMITTED" == "null" ]; then
            echo "Error: Could not find latest record submission status in private API."
            exit 1
          fi
          
          if [ "$LATEST_PUBLIC_RECORD_SUBMITTED" == "false" ]; then
            echo "Latest record is published, need to create a new draft"
          else
            echo "A previous draft already exists, need to clear and reuse."
          fi
          
          exit 

      - name: Create new version from latest record ID
        id: new_version
        run: |
         
          ZENODO_API_TOKEN=${{ secrets.ZENODO_API_TOKEN }} 
          echo "Creating new version using Zenodo record $LATEST_PUBLIC_RECORD_ID, access token $ZENODO_API_TOKEN"

          REQUEST=https://zenodo.org/api/deposit/depositions/$LATEST_PUBLIC_RECORD_ID/actions/newversion?access_token=$ZENODO_API_TOKEN

          echo $REQUEST
          
          # Create a new version from the latest deposition
          RESPONSE=$(curl -s -X POST $REQUEST )

          echo Response:
          echo $RESPONSE
          
          NEW_RECORD_ID=$(echo "$RESPONSE" | jq -r '.id')
          #NEW_RECORD_ID="14872810"
          echo New record ID: $NEW_RECORD_ID

          if [ -z "$NEW_RECORD_ID" ] || [ "$NEW_RECORD_ID" == "null" ]; then
            echo "Error: Could not create new record in private API."
            echo "Perhaps a draft release already exists?"
            exit 1
          fi

          echo "New deposition ID: $NEW_RECORD_ID"
          NEW_DOI="10.5281/zenodo.$NEW_RECORD_ID"
          echo "New DOI:" $NEW_DOI
          NEW_DOI_URL="https://doi.org/$NEW_DOI"
          echo "NEW DOI (full URL):" $NEW_DOI_URL

          echo "NEW_RECORD_ID=$NEW_RECORD_ID" >> $GITHUB_ENV
          echo "NEW_DOI=$NEW_DOI" >> $GITHUB_ENV
          echo "NEW_DOI_URL=$NEW_DOI_URL" >> $GITHUB_ENV

      - name: Update DOI references in distribution files
        id: update_doi_files
        run: |
         
          ZENODO_API_TOKEN=${{ secrets.ZENODO_API_TOKEN }} 
          
          
          echo "Setting Git identity to github-actions[bot]"
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Updating pyproject.toml with ${NEW_DOI_URL}"
          PATT='"DOI \(Latest\)".*'
          REPL="\"DOI (Latest)\" = \"${NEW_DOI_URL}\""
          echo "PATT: ${PATT}
          echo "REPL: ${REPL}
          echo "Matching lines:"
          sed -E -n "/$PATT/p" pyproject.toml
          echo "Replacing..."
          sed -i -E "s|${PATT}|${REPL}|" pyproject.toml
          
          echo "Revised pyproject.toml:"
          cat pyproject.toml
          git add pyproject.toml
          git commit -m "Updated DOI in pyproject.toml" || echo "No changes to commit"
          git push
 
          echo "Updating CITATION.cff with ${NEW_DOI}"
          
          # This doesn't update all the references in citation.cff yet.  The versioned DOI and release version number
          # appear in the identifiers: tag:
          #
          # identifiers:
          # - type: doi
          # value: 10.5281/zenodo.14862141
          # description: All Versions
          # - type: doi
          # value: 10.5281/zenodo.14862210
          # description: Version 1.1.2
          #
          # And the version number also appears in the version: tag:
          # version: 1.1.2
          # 
          # And there's a date-released tag that should be updated:
          # date-released: '2025-02-13'
          
          sed -i "s|doi: .*|doi: ${NEW_DOI}|" CITATION.cff
          echo "Revised CITATION.cff:"
          cat CITATION.cff
          git add CITATION.cff
          git commit -m "Updated DOI in CITATION.cff" || echo "No changes to commit"
          git push

